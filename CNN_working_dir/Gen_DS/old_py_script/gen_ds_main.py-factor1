import numpy as np
import cv2
import math
import time
import os
import shutil
import matplotlib.pyplot as plt
import tensorflow as tf
from gen_ds_utils import dir_check, slice_image, make_noisy_image, make_valid_set 

base_path = os.getcwd()
ori_file_dir = 'ori_png/'   # It indicates directory for origin images. (.png format)
dir_name = 'ori_image/'     # Sliced iages are saving in this directory. (.npy format)
dir_name1 = 'norm_image/'   # We save normalized images in this directory. (.npy format)
dir_name2 = 'noise_image/'  # We save noisy images in thies directory. (.npy format)

num_make_images = 8  # We make num_make_images*num_make_images images.

noise_factor = [0.2]  # We use various noises for traning images.
exp_img_option = 4  # 0: Using experimental images (already noise, do not use to 0 for traning sets).
                    # 1: Gaussian noise.
                    # 2: Salt-Pepper noise
                    # 3: Gaussian + Salt-Pepper noise
                    # 4: Salt-Pepper + Gausian noise

#img_proc(base_path, ori_file_dir, dir_name, dir_name1, dir_name2, num_make_images, noise_factor, exp_img_option)

slice_image(base_path, dir_name, ori_file_dir, num_make_images, noise_factor, exp_img_option)
make_noisy_image(base_path, dir_name, dir_name1, dir_name2, noise_factor, exp_img_option)

make_valid_set(base_path, dir_name1, dir_name2)

dir_name = 'test_image/'
ori_file_dir = 'test_png/'       # It indicates directory for origin images. (.png format)
dir_name1 = 'norm_image-test/'   # We save normalized images in this directory. (.npy format)
dir_name2 = 'noise_image-test/'  # We save noisy images in thies directory. (.npy format)

noise_factor = [0.2]

exp_img_option = 4  # 0: Using experimental images (already noise).
                    # 1: Gaussian noise.
                    # 2: Salt-Pepper noise
                    # 3: Gaussian + Salt-Pepper noise
                    # 4: Salt-Pepper + Gausian noise

#img_proc(base_path, ori_file_dir, dir_name, dir_name1, dir_name2, num_make_images, noise_factor, exp_img_option)

slice_image(base_path, dir_name, ori_file_dir, num_make_images, noise_factor, exp_img_option)
make_noisy_image(base_path, dir_name, dir_name1, dir_name2, noise_factor, exp_img_option)

print('Program done')
